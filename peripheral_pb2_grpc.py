# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import empty_pb2 as empty__pb2
import peripheral_pb2 as peripheral__pb2


class PeripheralManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPeripheral = channel.unary_unary(
                '/api.PeripheralManagementService/GetPeripheral',
                request_serializer=peripheral__pb2.GetPeripheralRequest.SerializeToString,
                response_deserializer=peripheral__pb2.Peripheral.FromString,
                )
        self.CreatePeripheral = channel.unary_unary(
                '/api.PeripheralManagementService/CreatePeripheral',
                request_serializer=peripheral__pb2.NewPeripheral.SerializeToString,
                response_deserializer=peripheral__pb2.Peripheral.FromString,
                )
        self.RemovePeripheral = channel.unary_unary(
                '/api.PeripheralManagementService/RemovePeripheral',
                request_serializer=peripheral__pb2.Peripheral.SerializeToString,
                response_deserializer=empty__pb2.Empty.FromString,
                )
        self.LinkHardware = channel.unary_unary(
                '/api.PeripheralManagementService/LinkHardware',
                request_serializer=peripheral__pb2.LinkHardwareRequest.SerializeToString,
                response_deserializer=peripheral__pb2.Peripheral.FromString,
                )
        self.GetDeploymentPeripherals = channel.unary_stream(
                '/api.PeripheralManagementService/GetDeploymentPeripherals',
                request_serializer=peripheral__pb2.GetDeploymentPeripheralsRequest.SerializeToString,
                response_deserializer=peripheral__pb2.Peripheral.FromString,
                )


class PeripheralManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPeripheral(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePeripheral(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePeripheral(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkHardware(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeploymentPeripherals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PeripheralManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPeripheral': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeripheral,
                    request_deserializer=peripheral__pb2.GetPeripheralRequest.FromString,
                    response_serializer=peripheral__pb2.Peripheral.SerializeToString,
            ),
            'CreatePeripheral': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePeripheral,
                    request_deserializer=peripheral__pb2.NewPeripheral.FromString,
                    response_serializer=peripheral__pb2.Peripheral.SerializeToString,
            ),
            'RemovePeripheral': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePeripheral,
                    request_deserializer=peripheral__pb2.Peripheral.FromString,
                    response_serializer=empty__pb2.Empty.SerializeToString,
            ),
            'LinkHardware': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkHardware,
                    request_deserializer=peripheral__pb2.LinkHardwareRequest.FromString,
                    response_serializer=peripheral__pb2.Peripheral.SerializeToString,
            ),
            'GetDeploymentPeripherals': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDeploymentPeripherals,
                    request_deserializer=peripheral__pb2.GetDeploymentPeripheralsRequest.FromString,
                    response_serializer=peripheral__pb2.Peripheral.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.PeripheralManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PeripheralManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPeripheral(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.PeripheralManagementService/GetPeripheral',
            peripheral__pb2.GetPeripheralRequest.SerializeToString,
            peripheral__pb2.Peripheral.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePeripheral(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.PeripheralManagementService/CreatePeripheral',
            peripheral__pb2.NewPeripheral.SerializeToString,
            peripheral__pb2.Peripheral.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemovePeripheral(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.PeripheralManagementService/RemovePeripheral',
            peripheral__pb2.Peripheral.SerializeToString,
            empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LinkHardware(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.PeripheralManagementService/LinkHardware',
            peripheral__pb2.LinkHardwareRequest.SerializeToString,
            peripheral__pb2.Peripheral.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeploymentPeripherals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.PeripheralManagementService/GetDeploymentPeripherals',
            peripheral__pb2.GetDeploymentPeripheralsRequest.SerializeToString,
            peripheral__pb2.Peripheral.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
